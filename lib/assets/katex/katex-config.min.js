// Render math and force KaTeX to display LTR even in RTL pages
function renderMathInElementLTR(container) {
  if (!container) return;

  renderMathInElement(container, {
    delimiters: [
      { left: "$$", right: "$$", display: true },
      { left: "$", right: "$", display: false },
      { left: "\\(", right: "\\)", display: false },
      { left: "\\[", right: "\\]", display: true },
    ],
  });

  document.querySelectorAll(".katex, .katex-display").forEach((el) => {
    el.setAttribute("dir", "ltr");
    el.setAttribute("contenteditable", "false");
    el.style.direction = "ltr";
    el.style.textAlign = "left";
    el.style.unicodeBidi = "embed";
  });
}

function katexToLatex(html) {
  // Create a DOM parser to handle the HTML safely
  const container = document.createElement('div');
  container.innerHTML = html;

  // Find all rendered KaTeX elements
  const katexSpans = container.querySelectorAll('.katex');

  katexSpans.forEach(span => {
    // Extract the <annotation encoding="application/x-tex"> content
    const annotation = span.querySelector('annotation[encoding="application/x-tex"]');
    if (annotation) {
      const latex = annotation.textContent;
      // Replace the entire KaTeX span with LaTeX inline form \( ... \)
      const latexNode = document.createTextNode(`\\(${latex}\\)`);
      span.replaceWith(latexNode);
    }
  });

  // Return the converted HTML as text
  return container.innerHTML;
}

function beforeOnChangeContent(html) {
  return katexToLatex(html);
}

document.addEventListener("DOMContentLoaded", () => {
  renderMathInElementLTR(document.body);
});
